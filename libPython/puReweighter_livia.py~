import ROOT as rt
import numpy as np
import sys
import argparse
import os

print '** puReweighter requires root_numpy.'
print '** To install on lxplus: '
print 'pip install --user root_numpy'
from root_numpy import  tree2array, array2tree


customWeights_17Nov2017MCv2 = {

    '2017_runB' : [ 2.53462e-09,
 8.16888e-06,            0.0138454,      0.0253495,      0.0426339,      0.0896071,      0.121387,       0.210254,
 0.152333,                0.401194,       0.624793,       0.873098,       0.974098,       1.00239,        0.977906,
 0.980978,                 1.0195,         1.12599,        1.27774,        1.42683,        1.55965,        1.65301,
 1.73897,                   1.80306,        1.82725,        1.88147,        1.91557,        1.96378,        2.01313,
 2.00135,                    1.94266,        1.82077,        1.66187,        1.50162,        1.31553,        1.12855,
 0.964381,                    0.796004,       0.626916,       0.48379,        0.370859,       0.285704,       0.212198,
 0.153836,                     0.107536,       0.0720789,      0.0462671,      0.0272688,      0.0158945,      0.00881789,
 0.00459221,                    0.00246203,     0.00128547,     0.000664005,    0.000346549,    0.000176104,    9.29263e-05,
 4.96067e-05,                    2.69212e-05,    1.47883e-05,    8.41016e-06,    4.9331e-06,     2.94294e-06,    1.72769e-06,
 1.04758e-06,                     5.64483e-07,    2.98876e-07,    1.7202e-07,     1.09505e-07,    6.35702e-08,    3.63942e-08,
 1.72989e-08,                      9.63871e-09,    5.05651e-09,    1.43628e-09,    8.92368e-10,    2.82895e-10,    1.20069e-10,
 2.88195e-11,                       8.11206e-12,    1.84486e-12,    1.03061e-12,    4.76349e-13,    6.23883e-14,    2.7031e-14,
 6.70069e-15,                        4.20573e-15,    4.31503e-16,    1.14701e-16,    0,              0,              0,
 0,                                   0,              0,              0,              0,              0,              0,
    ],
    '2017_runC' : [   0.000237456,
 0.0218355,              0.0110008,      0.0384203,      0.0753445,      0.0837661,      0.1088,         0.172844,
 0.11185,                 0.215796,       0.257418,       0.431581,       0.71428,        1.07926,        1.39849,
 1.65057,                  1.77489,        1.82412,        1.82692,        1.79887,        1.78113,        1.76089,
 1.76217,                   1.7578,         1.7281,         1.73805,        1.73727,        1.75641,        1.78461,
 1.76742,                    1.71597,        1.61298,        1.47938,        1.3463,         1.19164,        1.03692,
 0.902668,                    0.762369,       0.617169,       0.492025,       0.392035,       0.316337,       0.248454,
 0.192707,                     0.146101,       0.107841,       0.0774686,      0.0519213,      0.0349232,      0.0226267,
 0.0138724,                     0.00878297,     0.00540262,     0.00326261,     0.0019666,      0.00113682,     0.000671374,
 0.00039497,                     0.000233151,    0.000137959,    8.40046e-05,    5.26289e-05,    3.35602e-05,    2.11329e-05,
 1.38229e-05,                     8.09497e-06,    4.69942e-06,    2.99526e-06,    2.13439e-06,    1.40298e-06,    9.20391e-07,
 5.07503e-07,                      3.32155e-07,    2.07269e-07,    7.09115e-08,    5.37254e-08,    2.10219e-08,    1.11428e-08,
 3.37827e-09,                       1.21431e-09,    3.56372e-10,    2.59461e-10,    1.57859e-10,    2.74691e-11,    1.5939e-11,
 5.33813e-12,                        4.5028e-12,     6.3053e-13,     2.28948e-13,    8.92759e-14,    1.10254e-13,    4.57706e-14,
 3.02443e-14,                         4.68818e-15,    8.60597e-16,    1.19991e-16,    1.14228e-16,    0,              0,     ],


    '2017_runD' : [ 4.86371e-13,
 1.04816e-05,            0.00647354,     0.0354137,      0.103521,       0.160419,       0.168093,       0.205988,
 0.0971136,               0.129559,       0.0995059,      0.0849898,      0.0871621,      0.113399,       0.201269,
 0.461342,                 0.939882,       1.42719,        1.7114,         1.85537,        1.9506,         1.96372,
 1.98393,                   2.06665,        2.17518,        2.31573,        2.37345,        2.38649,        2.35253,
 2.20677,                    1.98383,        1.69839,        1.40609,        1.1504,         0.914284,       0.715553,
 0.563136,                    0.433145,       0.321508,       0.235762,       0.172449,       0.126816,       0.0897236,
 0.0617761,                    0.0408924,      0.0258908,      0.015659,       0.00866364,     0.00470984,     0.00241069,
 0.0011393,                     0.000541676,    0.000243436,    0.000104389,    4.33917e-05,    1.67888e-05,    6.43814e-06,
 2.38493e-06,                    8.59289e-07,    3.00711e-07,    1.04891e-07,    3.64473e-08,    1.24755e-08,    4.0794e-09,
 1.33988e-09,                     3.80854e-10,    1.03687e-10,    2.99318e-11,    9.32621e-12,    2.58687e-12,    6.90932e-13,
 1.49601e-13,                      3.70699e-14,    8.47646e-15,    9.83686e-16,    2.55009e-16,    9.44973e-18,    0,
 0,                                 0,              0,              0,              0,              0,              0,
 0,                                  0,              0,              0,              0,              0,              0,
 0,                                   0,              0,              0,              0,              0,              0,],

    '2017_runE' : [9.07194e-09,
 0.00424013,             0.0169728,      0.0187057,      0.0425328,      0.084961,       0.0943206,      0.142389,
 0.0759306,               0.106566,       0.0864706,      0.117243,       0.178672,       0.250803,       0.316069,
 0.393504,                 0.483489,       0.59745,        0.727533,       0.84889,        0.948772,       1.01174,
 1.05834,                   1.07659,        1.05524,        1.0421,         1.02036,        1.02241,        1.05329,
 1.0875,                     1.13004,        1.16007,        1.17807,        1.19991,        1.20367,        1.20789,
 1.24001,                     1.26661,        1.27259,        1.29093,        1.33993,        1.43985,        1.53721,
 1.651,                        1.76037,        1.84825,        1.90033,        1.82424,        1.74969,        1.60228,
 1.372,                         1.19686,        1.00017,        0.809341,       0.64555,        0.4885,         0.374404,
 0.284061,                       0.215431,       0.163568,       0.127967,       0.103405,       0.0855911,      0.0705794,
 0.0611302,                       0.0480325,      0.0379746,      0.0334987,      0.0336006,      0.0316254,      0.0302132,
 0.0246591,                        0.0242627,      0.0230982,      0.0122253,      0.0145208,      0.00902168,     0.00768758,
 0.00379248,                        0.00224471,     0.0010976,      0.00134705,     0.00139755,     0.000419476,    0.000424638,
 0.000250933,                        0.000377662,    9.5409e-05,     6.31991e-05,    4.54234e-05,    0.000104668,    8.19173e-05,
 0.000103138,                         3.08225e-05,    1.12374e-05,    2.8414e-06,     6.97213e-06,    6.86114e-06,    2.2169e-06, ],
    '2017_runF' : [ 0.000719483,
 0.11203,                0.138261,       0.128894,       0.0861932,      0.129176,       0.122472,       0.122857,
 0.132721,                0.741404,       1.00366,        1.23235,        1.06354,        0.787262,       0.580658,
 0.49322,                  0.468563,       0.467957,       0.474606,       0.486624,       0.530095,       0.606751,
 0.694247,                  0.744171,       0.741465,       0.73275,        0.710611,       0.697045,       0.696987,
 0.697668,                   0.708632,       0.72182,        0.738837,       0.768906,       0.797527,       0.83437,
 0.894093,                    0.948328,       0.984497,       1.03598,        1.13519,        1.32517,        1.58545,
 1.95437,                      2.41747,        2.93432,        3.43504,        3.66815,        3.80723,        3.66338,
 3.20117,                       2.77194,        2.24161,        1.71688,        1.27308,        0.884221,       0.618107,
 0.42843,                        0.300216,       0.215403,       0.164769,       0.136007,       0.120749,       0.111961,
 0.113435,                        0.10725,        0.103739,       0.112707,       0.139118,       0.160211,       0.185653,
 0.18193,                          0.212632,       0.237895,       0.146452,       0.200338,       0.14201,        0.136834,
 0.0756801,                         0.0498076,      0.0268656,      0.03609,        0.0406759,      0.013165,       0.014266,
 0.00895921,                         0.0142276,      0.0037656,      0.0025947,      0.00192621,     0.00455199,     0.00362774,
 0.00461804,                          0.00138541,     0.00050343,     0.000125962,    0.000303654,    0.000291456,    9.11871e-05,],

    '2017_runBCDEF' : [0.000290519,
 0.0426723,              0.0538389,      0.0618043,      0.0706721,      0.10739,        0.117541,       0.157374,
 0.113807,                0.375898,       0.489549,       0.638777,       0.674733,       0.6911,         0.71833,
 0.79244,                  0.886634,       0.985348,       1.06373,        1.12014,        1.17759,        1.22413,
 1.27543,                   1.31065,        1.31197,        1.32909,        1.32662,        1.33397,        1.34961,
 1.33725,                    1.30888,        1.25283,        1.18327,        1.12254,        1.05132,        0.986593,
 0.947691,                    0.90616,        0.854766,       0.821432,       0.822173,       0.87463,        0.953544,
 1.07717,                      1.23485,        1.40911,        1.57351,        1.62395,        1.64713,        1.56322,
 1.35788,                       1.17681,        0.958381,       0.743467,       0.56131,        0.398767,       0.28608,
 0.203759,                       0.146431,       0.107066,       0.0825301,      0.0676224,      0.0586444,      0.0524112,
 0.0507798,                       0.0458278,      0.0424304,      0.0443636,      0.0530278,      0.0594876,      0.0674961,
 0.0650366,                        0.0749932,      0.0829989,      0.0506497,      0.0687934,      0.0484804,      0.0464887,
 0.0256093,                         0.0167982,      0.00903542,     0.0121093,      0.0136211,      0.0044012,      0.00476258,
 0.00298744,                         0.0047395,      0.00125339,     0.000863082,    0.000640387,    0.00151275,     0.00120526,
 0.00153402,                          0.00046018,     0.000167228,    4.18485e-05,    0.00010091,     9.68945e-05,    3.03309e-05,],

    }

puMC = {
    'Spring2016MC_PUscenarioV1' : [ 0.000829312873542, 0.00124276120498, 0.00339329181587, 0.00408224735376, 0.00383036590008, 
                                    0.00659159288946,  0.00816022734493, 0.00943640833116, 0.0137777376066,  0.017059392038,
                                    0.0213193035468,   0.0247343174676,  0.0280848773878,  0.0323308476564,  0.0370394341409,  
                                    0.0456917721191,   0.0558762890594,  0.0576956187107,  0.0625325287017,  0.0591603758776,
                                    0.0656650815128,   0.0678329011676,  0.0625142146389,  0.0548068448797,  0.0503893295063,  
                                    0.040209818868,    0.0374446988111,  0.0299661572042,  0.0272024759921,  0.0219328403791,
                                    0.0179586571619,   0.0142926728247,  0.00839941654725, 0.00522366397213, 0.00224457976761, 
                                    0.000779274977993, 0.000197066585944,7.16031761328e-05,0.0             , 0.0,
                                    0.0,        0.0,        0.0,        0.0,        0.0,    
                                    0.0,        0.0,        0.0,        0.0,        0.0],
    
    'Moriond17MC_mix_2016'      : [ 1.78653e-05 ,2.56602e-05 ,5.27857e-05 ,8.88954e-05 ,0.000109362 ,0.000140973 ,0.000240998 ,
                                    0.00071209  , 0.00130121 ,0.00245255  ,0.00502589  ,0.00919534  ,0.0146697   ,0.0204126   ,
                                    0.0267586   ,0.0337697   ,0.0401478   ,0.0450159   ,0.0490577   ,0.0524855   ,0.0548159   ,
                                    0.0559937   ,0.0554468   ,0.0537687   ,0.0512055   ,0.0476713   ,0.0435312   ,0.0393107   ,
                                    0.0349812   ,0.0307413   ,0.0272425   ,0.0237115   ,0.0208329   ,0.0182459   ,0.0160712   ,
                                    0.0142498   ,0.012804    ,0.011571    ,0.010547    ,0.00959489  ,0.00891718  ,0.00829292  , 
                                    0.0076195   ,0.0069806   ,0.0062025   ,0.00546581  ,0.00484127  ,0.00407168  ,0.00337681  ,
                                    0.00269893  ,0.00212473  ,0.00160208  ,0.00117884  ,0.000859662 ,0.000569085 ,0.000365431 ,
                                    0.000243565 ,0.00015688  ,9.88128e-05 ,6.53783e-05 ,3.73924e-05 ,2.61382e-05 ,2.0307e-05  ,
                                    1.73032e-05 ,1.435e-05   ,1.36486e-05 ,1.35555e-05 ,1.37491e-05 ,1.34255e-05 ,1.33987e-05 ,
                                    1.34061e-05 ,1.34211e-05 ,1.34177e-05 ,1.32959e-05 ,1.33287e-05 ],




    'Moriond18MC_mix_2017' :[3.39597497605e-05,    6.63688402133e-06,     1.39533611284e-05,     3.64963078209e-05,     6.00872171664e-05,     9.33932578027e-05,    0.000120591524486,
                             0.000128694546198,    0.000361697233219,     0.000361796847553,     0.000702474896113,     0.00133766053707,      0.00237817050805,     0.00389825605651,
                             0.00594546732588,     0.00856825906255,      0.0116627396044,       0.0148793350787,       0.0179897368379,       0.0208723871946,      0.0232564170641,
                             0.0249826433945,      0.0262245860346,       0.0272704617569,       0.0283301107549,       0.0294006137386,       0.0303026836965,      0.0309692426278,   
                             0.0308818046328,      0.0310566806228,       0.0309692426278,       0.0310566806228,       0.0310566806228,       0.0310566806228,      0.0307696426944,
                             0.0300103336052,      0.0288355370103,       0.0273233309106,       0.0264343533951,       0.0255453758796,       0.0235877272306,      0.0215627588047,
                             0.0195825559393,      0.0177296309658,       0.0160560731931,       0.0146022004183,       0.0134080690078,       0.0129586991411,      0.0125093292745,
                             0.0124360740539,      0.0123547104433,       0.0123953922486,       0.0124360740539,       0.0124360740539,       0.0123547104433,      0.0124360740539,
                             0.0123387597772,      0.0122414455005,       0.011705203844,        0.0108187105305,       0.00963985508986,      0.00827210065136,     0.00683770076341,
                             0.00545237697118,     0.00420456901556,      0.00367513566191,      0.00314570230825,      0.0022917978982,       0.00163221454973,     0.00114065309494,
                             0.000784838366118,    0.000533204105387,     0.000358474034915,     0.000238881117601,     0.0001984254989,       0.000157969880198,    0.00010375646169,
                             6.77366175538e-05,    4.39850477645e-05,     2.84298066026e-05,     1.83041729561e-05,     1.17473542058e-05,     7.51982735129e-06,    6.16160108867e-06,
                             4.80337482605e-06,    3.06235473369e-06,     1.94863396999e-06,     1.23726800704e-06,     7.83538083774e-07,     4.94602064224e-07,    3.10989480331e-07,
                             1.94628487765e-07,    1.57888581037e-07,     1.2114867431e-07,      7.49518929908e-08,     4.6060444984e-08,      2.81008884326e-08,    1.70121486128e-08,
                             1.02159894812e-08],






}

### MC pu scenario to be used
#puMCscenario = 'Spring2016MC_PUscenarioV1'
puMCscenario = 'Moriond18MC_mix_2017'
customWeightsName= 'weights'
puDirEOS = '/eos/cms/store/group/phys_egamma/soffi/TnP/ntuples_01162018/PU/'

#### Compute weights for all data epoch specified below
puDataEpoch = {
    '2017_runB' : puDirEOS + 'pileup_2017_RUNB.root',
    '2017_runC' : puDirEOS + 'pileup_2017_RUNC.root',
    '2017_runD'  : puDirEOS +'pileup_2017_RUND.root' ,
    '2017_runE'  : puDirEOS +'pileup_2017_RUNE.root' ,
    '2017_runF' : puDirEOS + 'pileup_2017_RUNF.root',    
    '2017_runBCDEF' : puDirEOS + 'pileup_2017_41fb.root',
    }

nVtxDataEpoch = {
    '2016_runBCD' : 'etc/inputs/nVtx_2016_runBCD.root',
    '2016_runEF'  : 'etc/inputs/nVtx_2016_runEF.root' ,
    '2016_runGH'  : 'etc/inputs/nVtx_2016_runGH.root' ,
}

rhoDataEpoch = {
    '2016_runE'   : 'etc/inputs/rho_pu_runE.root',
    '2016_runGH'  : 'etc/inputs/rho_pu_runGH.root',
}





def reweight( sample, puType = 0,useCustomW=True  ):
    if sample.path is None:
        print '[puReweighter]: Need to know the MC tree (option --mcTree or sample.path)'
        sys.exit(1)
    

### create a tree with only weights that will be used as friend tree for reweighting different lumi periods
    print 'Opening mc file: ', sample.path[0]
    fmc = rt.TFile(sample.path[0],'read')
    tmc = None
    if sample.tnpTree is None:
        dirs = fmc.GetListOfKeys()
        for d in dirs:
            if (d.GetName() == "sampleInfo"): continue
            tmc = fmc.Get("%s/fitter_tree" % d.GetName())
    else:
        tmc = fmc.Get(sample.tnpTree)
    

#### can reweight vs nVtx but better to reweight v truePU
    puMCnVtx = []
    puMCrho = []
    if   puType == 1 :
        hmc   = rt.TH1F('hMC_nPV'  ,'MC nPV'  , 75,-0.5,74.5)
        tmc.Draw('event_nPV>>hMC_nPV','','goff')
        hmc.Scale(1/hmc.Integral())
        for ib in range(1,hmc.GetNbinsX()+1):
            puMCnVtx.append( hmc.GetBinContent(ib) )
        print 'len nvtxMC = ',len(puMCnVtx)

    elif puType == 2 :
        hmc   = rt.TH1F('hMC_rho'  ,'MC #rho'  , 75,-0.5,74.5)
        tmc.Draw('rho>>hMC_rho','','goff')
        hmc.Scale(1/hmc.Integral())
        for ib in range(1,hmc.GetNbinsX()+1):
            puMCrho.append( hmc.GetBinContent(ib) )
        print 'len rhoMC = ',len(puMCrho)
    

    puDataDist = {}
    puDataArray= {}
    weights = {}
    epochKeys = puDataEpoch.keys()
    if puType == 1  : epochKeys = nVtxDataEpoch.keys()
    if puType == 2  : epochKeys = rhoDataEpoch.keys()
 
    for pu in epochKeys:
        fpu = None
        if   puType == 1 : fpu = rt.TFile(nVtxDataEpoch[pu],'read')
        elif puType == 2 : fpu = rt.TFile(rhoDataEpoch[pu],'read')
        else             : fpu = rt.TFile(puDataEpoch[pu],'read')
        puDataDist[pu] = fpu.Get('pileup').Clone('puHist_%s' % pu)
        puDataDist[pu].Scale(1./puDataDist[pu].Integral())
        puDataDist[pu].SetDirectory(0)
        puDataArray[pu] = []
        for ipu in range(len(puMC[puMCscenario])):
            ibin_pu  = puDataDist[pu].GetXaxis().FindBin(ipu+0.00001)
            puDataArray[pu].append(puDataDist[pu].GetBinContent(ibin_pu))
        print 'puData[%s] length = %d' % (pu,len(puDataArray[pu]))
        fpu.Close()
        weights[pu] = []

    mcEvts = tree2array( tmc, branches = ['weight','truePU','event_nPV','rho'] )


    pumc = puMC[puMCscenario]
    if   puType == 1:  pumc = puMCnVtx
    elif puType == 2:  pumc = puMCrho
    else            :  pumc = puMC[puMCscenario]

    puMax = len(pumc)
    print '-> nEvtsTot ', len(mcEvts)
#    print "--------------------------" 
    for ievt in xrange(len(mcEvts)):
        if ievt%100000 == 0 :            print 'iEvt:',ievt
#        print 'iEvt:',ievt
        evt = mcEvts[ievt]
        for pu in epochKeys:
#            print pu
            customWeights=customWeights_17Nov2017MCv2[pu]
#            print customWeights_17Nov2017MCv2[pu]
#            print "--------------------------"
            pum = -1
            pud = -1
            if puType == 1 and evt['event_nPV'] < puMax:
                pud = puDataArray[pu][evt['event_nPV']]
                pum = pumc[evt['event_nPV']]
            if puType == 2 and int(evt['rho']) < puMax:
                pud = puDataArray[pu][int(evt['rho'])]
                pum = pumc[int(evt['rho'])]
            elif puType == 0:
#                if ievt%1000: print pu, evt['truePU']
                if evt['truePU']> 0 and evt['truePU']<99: 
                    pud = puDataArray[pu][evt['truePU']] 
                    pum = pumc[evt['truePU']]
            puw = 0
            if pum > 0: 
                puw  = pud/pum
#                if use customized weights
            if useCustomW:
                puw=0
                if  evt['truePU']> 0 and evt['truePU']<97:
                    puw = customWeights[evt['truePU']]
                
#                    print evt['truePU'],puw

            if evt['weight'] > 0 : totw = +puw
            else                 : totw = -puw
            weights[pu].append( ( puw,totw) )
#    print "====================="
#    print weights[pu]

    newFile    = rt.TFile( sample.puTree, 'recreate')

    for pu in epochKeys:
        treeWeight = rt.TTree('weights_%s'%pu,'tree with weights')
        wpuarray = np.array(weights[pu],dtype=[('PUweight',float),('totWeight',float)])
        array2tree( wpuarray, tree = treeWeight )
        treeWeight.Write()

    newFile.Close()    
    fmc.Close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='tnp EGM pu reweighter')
    parser.add_argument('--mcTree'  , dest = 'path',  default = None, help = 'MC tree to compute weights for')
    parser.add_argument('puTree'    , default = None                , help = 'output puTree')

    args = parser.parse_args()
    args.path = [args.path]
    reweight(args)





